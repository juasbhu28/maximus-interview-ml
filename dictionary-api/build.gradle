plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('jacoco_report')
}

def excludesClasses = [
							'com/dictionary/DictionaryApplication.class',
							'**/dto/**/*.class',
							'**/config/**/*.class',
							'**/security/**/*.class',
							'**/exception/**/*.class',
					]

tasks.named('jacocoTestReport') {
	dependsOn test
	reports {
			xml.required = true
	}   

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: excludesClasses)
	}))

	
}

jacocoTestCoverageVerification {
	afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludesClasses)
        }))
    }
	violationRules {
			rule {
					limit {
							minimum = 0.9 // Este es el porcentaje mínimo de cobertura como ejemplo, ajusta según necesidad
					}
			}
	}
}

checkstyle {
	toolVersion '10.7.0'
	configFile file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
	source ='src/main/java'
}

checkstyleTest {
	source ='src/test/java'
}


tasks.named('check').configure {
    dependsOn jacocoTestCoverageVerification
}